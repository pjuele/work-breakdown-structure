generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  tennantId         String       // @unique
  id                String          @id @db.VarChar(3) // @default(autoincrement())
  name              String?         @db.VarChar(255)
  color             String          @db.VarChar(50)
  logoUrl           String          @db.VarChar(255)
  projects          Project[]
}

model Project {
  tennantId         String          // @unique
  id                String          @id @db.VarChar(3) // @default(autoincrement())
  name              String?         @db.VarChar(255)
  color             String          @db.VarChar(50)
  clientId          String
  client            Client          @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  phases            ProjectPhase[]
}

model ProjectPhase {
  tennantId         String          // @unique
  id                Int             @id @default(autoincrement())
  name              String?         @db.VarChar(255)
  projectId         String
  project           Project         @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  deliverables      Deliverable[]
}

model Deliverable {
  tennantId         String          // @unique
  id                Int             @id @default(autoincrement()) //String
  name              String          @db.VarChar(255)
  startDate         DateTime?       @default(dbgenerated("CURRENT_DATE")) @db.Date
  phaseId           Int
  parent            ProjectPhase    @relation(fields: [phaseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  elements          Element[]
}

model Element {
  tennantId         String          // @unique
  id                Int             @id @default(autoincrement())
  name              String          @db.VarChar(255)
  size              String          @db.VarChar(2)
  deliverableId     Int
  parent            Deliverable     @relation(fields: [deliverableId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// model TeamMember {
//   id               Int       @id @default(autoincrement())
//   name             String?   @db.VarChar(255)
//   assignedElements Element[]
// }

// CV schema


model Position {
  tennantId         String          // @unique
  id                Int             @id @default(autoincrement())
  name              String          @db.VarChar(255)
  description       String?         @db.VarChar(255)
  from              DateTime        @db.Date
  to                DateTime        @db.Date
  countries         String[]        @db.VarChar(3)
  employerId        Int
  at                Employer @relation(fields: [employerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Employer {
  id                Int             @id @default(autoincrement()) @unique
  name              String          @db.VarChar(255)
  logoUrl           String?         @db.VarChar(255)
  positions         Position[]
}

model EducationCourse {
  tennantId         String          // @unique
  id                Int             @id @default(autoincrement())
  title             String          @db.VarChar(255)
  description       String?         @db.VarChar(255)
  isDegree          Boolean         @db.Boolean @default(false)
  from              DateTime?       @db.Date
  to                DateTime        @db.Date
  country           String?         @db.VarChar(3)
  educationCenterId Int
  at                EducationCenter @relation(fields: [educationCenterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model EducationCenter {
  id                Int             @id @default(autoincrement()) @unique
  name              String          @db.VarChar(255)
  logoUrl           String?         @db.VarChar(255)
  courses           EducationCourse[]
}

model Skill {
  id                Int             @id @default(autoincrement()) @unique
  name              String          @db.VarChar(255)
  skillGroupTag     String?         @db.VarChar(20)
}

model Language {
  id                String          @id @db.VarChar(5) @unique // es_UY, en, en_US, etc.
  name              String          @db.VarChar(20)
  flagUrl           String          @db.VarChar(255)
}

model PersonalProject {
  tennantId         String          // @unique
  id                Int             @id @default(autoincrement())
  name              String          @db.VarChar(20)
  description       String?         @db.VarChar(255)
  iconUrl           String?         @db.VarChar(255)
  screenshotUrl     String?         @db.VarChar(255)
  websiteUrl        String?         @db.VarChar(255)
}

model Interest {
  tennantId         String          // @unique
  id                Int             @id @default(autoincrement())
  name              String          @db.VarChar(20)
  description       String?         @db.VarChar(255)
}

model NotForMe {
  tennantId         String          // @unique
  id                Int             @id @default(autoincrement())
  name              String          @db.VarChar(20)
  description       String?         @db.VarChar(255)
}
